package com.DCN;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleDriver;
import oracle.jdbc.OracleStatement;
//import oracle.jdbc.dcn.DatabaseChangeEvent;
//import oracle.jdbc.dcn.DatabaseChangeListener;
import oracle.jdbc.dcn.DatabaseChangeRegistration;

public class DBChangeNotification
{
  static int nbThreads=0;
  static final String USERNAME= "sfmsbr";
  static final String PASSWORD= "sfms";
  static final String URL="jdbc:oracle:thin:@172.16.105.6:1521:NEWSFMS";
  public static void main(String args[])
  {
    DBChangeNotification demo = new DBChangeNotification();
    try
    {
      demo.entry();
    }
    catch(SQLException mainSQLException )
    {
      mainSQLException.printStackTrace();
    }
  }
 
  void entry() throws SQLException
  {
    OracleConnection conn = connect();

    Properties prop = new Properties();

    prop.setProperty(OracleConnection.DCN_NOTIFY_ROWIDS,"true");

    prop.setProperty(OracleConnection.DCN_QUERY_CHANGE_NOTIFICATION,"true");
    
    nbThreads =  Thread.getAllStackTraces().keySet().size();
	System.out.println(" number of threads before registration : "+nbThreads);

    DatabaseChangeRegistration dcr = conn.registerDatabaseChangeNotification(prop);
    
    nbThreads =  Thread.getAllStackTraces().keySet().size();
	System.out.println("number of threads after registration : "+nbThreads);
 
    try
    {
    	// add the listenerr:
        DCNDemoListener lstnr = new DCNDemoListener(this);
        dcr.addListener(lstnr);
      // second step: add objects in the registration:
      Statement stmt = conn.createStatement();
      // associate the statement with the registration:
      ((OracleStatement)stmt).setDatabaseChangeRegistration(dcr);
      ResultSet rs = stmt.executeQuery("select * from Employees");
      rs = stmt.executeQuery("select * from Workers");
      String[] tableNames = dcr.getTables();
      for(int i=0;i<tableNames.length;i++)
        System.out.println(tableNames[i]+" is part of the registration.");
      rs.close();
      stmt.close();
    }
    catch(Exception ex)
    {
    	System.out.println("jkfkdilsjj");
      // if an exception occurs, we need to close the registration in order
      // to interrupt the thread otherwise it will be hanging around.
      if(conn != null)
    	  System.out.println("sql exception occured");
        conn.unregisterDatabaseChangeNotification(dcr);
      throw ex;
    }
    finally
    {
      try
      {
        // Note that we close the connection!
        conn.close();
      }
      catch(Exception innerex){ innerex.printStackTrace(); }
    }
    
    synchronized( this ) 
    {
      // The following code modifies the Employees table and commits:
      try
      {
        OracleConnection conn2 = connect();
        conn2.setAutoCommit(false);
        Statement stmt2 = conn2.createStatement();
        stmt2.executeUpdate("insert into Employees values (123,'hanuman','raja','nijambad')",
        Statement.RETURN_GENERATED_KEYS);
        ResultSet autoGeneratedKey = stmt2.getGeneratedKeys();
        if(autoGeneratedKey.next())
        System.out.println("inserted one row with ROWID="+autoGeneratedKey.getString(1));      
        stmt2.executeUpdate("insert into Workers values (123,'hanuman','raja','nijambad')",
                Statement.RETURN_GENERATED_KEYS);
                autoGeneratedKey = stmt2.getGeneratedKeys();
                if(autoGeneratedKey.next())
                System.out.println("inserted one row with ROWID="+autoGeneratedKey.getString(1));           
        stmt2.close();
        conn2.commit();
        conn2.close();
      }
      catch(SQLException ex) { 
    	  ex.printStackTrace(); 
    	  }
 
      // wait until we get the event
      try{ 
    	  this.wait();
    	  } catch( InterruptedException ie ) {
    		  ie.printStackTrace();
    	  }
    }
    
    // At the end: close the registration (comment out these 3 lines in order
    // to leave the registration open).
    OracleConnection conn3 = connect();
    conn3.unregisterDatabaseChangeNotification(dcr);
    conn3.close();
  }
  
  /**
   * Creates a connection the database.
   */
  OracleConnection connect() throws SQLException
  {
    OracleDriver dr = new OracleDriver();
    Properties prop = new Properties();
    prop.setProperty("user",DBChangeNotification.USERNAME);
    prop.setProperty("password",DBChangeNotification.PASSWORD);
    return (OracleConnection)dr.connect(DBChangeNotification.URL,prop);
  }
}
